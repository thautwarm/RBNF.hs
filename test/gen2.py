# This file is automatically generated by RBNF.hs
#token=. {idint:int, colomn:int, lineno:int, val:str, name:str}
#ast=. {}
#linkedlist=a. {}
#tokens=. {offset:int}
#prim__eq::forall a. (a * a) -> bool
#prim__not__eq::forall a. (a * a) -> bool
#prim__null::forall a. a
#prim__peekable::(tokens * int) -> bool
#prim__peek::(tokens * int) -> token
#prim__match__tk::(tokens * int) -> ast
#prim__tk__id::str -> int
#prim__reset::(tokens * int) -> ()
#prim__cons::forall a. (a * linkedlist a) -> linkedlist a
#prim__nil::forall a. linkedlist a
#prim__to__errs::any -> linkedlist (int * str)
#prim__to__result::any -> ast
#prim__to__any::forall a. a -> any
#prim__mk__ast::forall a. (str * a) -> ast
#prim__is__null::forall a. a -> bool
#prim__is__not__null::forall a. a -> bool
#always__true::State -> bool
def lr_step_Mul(_slot_0, prim__state, prim__tokens):
    _tmp_0_flag = False
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote /"):
            lcl_2 = prim__tokens.offset
            _off_1 = lcl_2
            lcl_2 = prim__tk__id("quote /")
            lcl_2 = prim__match__tk(prim__tokens, lcl_2)
            _slot_1 = lcl_2
            lcl_2 = prim__is__null(_slot_1)
            if lcl_2:
                lcl_2 = prim__null
            else:
                _tmp_2_flag = False
                lcl_3 = prim__tokens.offset
                _off_2 = lcl_3
                lcl_3 = prim__peekable(prim__tokens, 1)
                if lcl_3:
                    lcl_5 = prim__peek(prim__tokens, 1)
                    lcl_5 = lcl_5.idint
                    if lcl_5 == prim__tk__id("quote /"):
                        lcl_5 = prim__tokens.offset
                        _off_3 = lcl_5
                        lcl_5 = prim__tk__id("number")
                        lcl_5 = prim__match__tk(prim__tokens, lcl_5)
                        _slot_2 = lcl_5
                        lcl_5 = prim__is__null(_slot_2)
                        if lcl_5:
                            lcl_5 = prim__null
                        else:
                            lcl_6 = (_slot_2,)
                            lcl_6 = prim__mk__ast("Atom", lcl_6)
                            _slot_local__1 = lcl_6
                            lcl_6 = (_slot_0, _slot_1, _slot_local__1)
                            _slot_local__2 = lcl_6
                            lcl_6 = (_slot_local__2,)
                            lcl_6 = prim__mk__ast("Mul", lcl_6)
                            _slot_local__3 = lcl_6
                            lcl_5 = _slot_local__3
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote *"):
                        lcl_5 = prim__tokens.offset
                        _off_3 = lcl_5
                        lcl_6 = prim__tk__id("number")
                        lcl_5 = prim__match__tk(prim__tokens, lcl_6)
                        _slot_2 = lcl_5
                        lcl_5 = prim__is__null(_slot_2)
                        if lcl_5:
                            lcl_5 = prim__null
                        else:
                            lcl_6 = (_slot_2,)
                            lcl_6 = prim__mk__ast("Atom", lcl_6)
                            _slot_local__1 = lcl_6
                            lcl_6 = (_slot_0, _slot_1, _slot_local__1)
                            _slot_local__2 = lcl_6
                            lcl_6 = (_slot_local__2,)
                            lcl_6 = prim__mk__ast("Mul", lcl_6)
                            _slot_local__3 = lcl_6
                            lcl_5 = _slot_local__3
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("quote ("):
                        lcl_5 = prim__tokens.offset
                        _off_3 = lcl_5
                        lcl_6 = prim__tk__id("quote (")
                        lcl_5 = prim__match__tk(prim__tokens, lcl_6)
                        _slot_2 = lcl_5
                        lcl_5 = prim__is__null(_slot_2)
                        if lcl_5:
                            lcl_5 = prim__null
                        else:
                            lcl_6 = parse_Mul(prim__state, prim__tokens)
                            _slot_3_check = lcl_6
                            lcl_6 = prim__is__null(_slot_3_check)
                            if lcl_6:
                                lcl_6 = prim__null
                            else:
                                _slot_3 = _slot_3_check
                                lcl_7 = prim__tokens.offset
                                _off_4 = lcl_7
                                lcl_7 = prim__tk__id("quote )")
                                lcl_7 = prim__match__tk(prim__tokens, lcl_7)
                                _slot_4 = lcl_7
                                lcl_7 = prim__is__null(_slot_4)
                                if lcl_7:
                                    lcl_7 = prim__null
                                else:
                                    lcl_8 = (_slot_2, _slot_3, _slot_4)
                                    _slot_local__1 = lcl_8
                                    lcl_8 = (_slot_local__1,)
                                    lcl_8 = prim__mk__ast("Atom", lcl_8)
                                    _slot_local__2 = lcl_8
                                    lcl_8 = (_slot_0, _slot_1, _slot_local__2)
                                    _slot_local__3 = lcl_8
                                    lcl_8 = (_slot_local__3,)
                                    lcl_8 = prim__mk__ast("Mul", lcl_8)
                                    _slot_local__4 = lcl_8
                                    lcl_7 = _slot_local__4
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    elif lcl_5 == prim__tk__id("number"):
                        lcl_5 = prim__tokens.offset
                        _off_3 = lcl_5
                        lcl_6 = prim__tk__id("quote (")
                        lcl_7 = prim__match__tk(prim__tokens, lcl_6)
                        _slot_2 = lcl_7
                        lcl_5 = prim__is__null(_slot_2)
                        if lcl_5:
                            lcl_5 = prim__null
                        else:
                            lcl_5 = parse_Mul(prim__state, prim__tokens)
                            _slot_3_check = lcl_5
                            lcl_5 = prim__is__null(_slot_3_check)
                            if lcl_5:
                                lcl_5 = prim__null
                            else:
                                _slot_3 = _slot_3_check
                                lcl_6 = prim__tokens.offset
                                _off_4 = lcl_6
                                lcl_6 = prim__tk__id("quote )")
                                lcl_6 = prim__match__tk(prim__tokens, lcl_6)
                                _slot_4 = lcl_6
                                lcl_6 = prim__is__null(_slot_4)
                                if lcl_6:
                                    lcl_6 = prim__null
                                else:
                                    lcl_7 = (_slot_2, _slot_3, _slot_4)
                                    _slot_local__1 = lcl_7
                                    lcl_7 = (_slot_local__1,)
                                    lcl_7 = prim__mk__ast("Atom", lcl_7)
                                    _slot_local__2 = lcl_7
                                    lcl_7 = (_slot_0, _slot_1, _slot_local__2)
                                    _slot_local__3 = lcl_7
                                    lcl_7 = (_slot_local__3,)
                                    lcl_7 = prim__mk__ast("Mul", lcl_7)
                                    _slot_local__4 = lcl_7
                                    lcl_6 = _slot_local__4
                                lcl_5 = lcl_6
                            lcl_5 = lcl_5
                        lcl_4 = lcl_5
                    else:
                        _tmp_2_flag = True
                        lcl_4 = prim__null
                    lcl_3 = lcl_4
                else:
                    lcl_3 = prim__null
                _tmp_2_result = lcl_3
                lcl_3 = prim__is__null(_tmp_2_result)
                lcl_4 = lcl_3 or _tmp_2_flag
                if lcl_4:
                    lcl_5 = _tmp_2_result
                else:
                    lcl_6 = prim__reset(prim__tokens, _off_2)
                    lcl_5 = prim__null
                lcl_2 = lcl_5
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote *"):
            lcl_2 = prim__tokens.offset
            _off_1 = lcl_2
            lcl_2 = prim__tk__id("quote *")
            lcl_2 = prim__match__tk(prim__tokens, lcl_2)
            _slot_1 = lcl_2
            lcl_2 = prim__is__null(_slot_1)
            if lcl_2:
                lcl_2 = prim__null
            else:
                _tmp_2_flag = False
                lcl_2 = prim__tokens.offset
                _off_2 = lcl_2
                lcl_2 = prim__peekable(prim__tokens, 1)
                if lcl_2:
                    lcl_4 = prim__peek(prim__tokens, 1)
                    lcl_4 = lcl_4.idint
                    if lcl_4 == prim__tk__id("quote /"):
                        lcl_4 = prim__tokens.offset
                        _off_3 = lcl_4
                        lcl_4 = prim__tk__id("number")
                        lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                        _slot_2 = lcl_4
                        lcl_4 = prim__is__null(_slot_2)
                        if lcl_4:
                            lcl_4 = prim__null
                        else:
                            lcl_5 = (_slot_2,)
                            lcl_5 = prim__mk__ast("Atom", lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1, _slot_local__1)
                            _slot_local__2 = lcl_5
                            lcl_5 = (_slot_local__2,)
                            lcl_5 = prim__mk__ast("Mul", lcl_5)
                            _slot_local__3 = lcl_5
                            lcl_4 = _slot_local__3
                        lcl_3 = lcl_4
                    elif lcl_4 == prim__tk__id("quote *"):
                        lcl_4 = prim__tokens.offset
                        _off_3 = lcl_4
                        lcl_5 = prim__tk__id("number")
                        lcl_4 = prim__match__tk(prim__tokens, lcl_5)
                        _slot_2 = lcl_4
                        lcl_4 = prim__is__null(_slot_2)
                        if lcl_4:
                            lcl_4 = prim__null
                        else:
                            lcl_5 = (_slot_2,)
                            lcl_5 = prim__mk__ast("Atom", lcl_5)
                            _slot_local__1 = lcl_5
                            lcl_5 = (_slot_0, _slot_1, _slot_local__1)
                            _slot_local__2 = lcl_5
                            lcl_5 = (_slot_local__2,)
                            lcl_5 = prim__mk__ast("Mul", lcl_5)
                            _slot_local__3 = lcl_5
                            lcl_4 = _slot_local__3
                        lcl_3 = lcl_4
                    elif lcl_4 == prim__tk__id("quote ("):
                        lcl_4 = prim__tokens.offset
                        _off_3 = lcl_4
                        lcl_5 = prim__tk__id("quote (")
                        lcl_4 = prim__match__tk(prim__tokens, lcl_5)
                        _slot_2 = lcl_4
                        lcl_4 = prim__is__null(_slot_2)
                        if lcl_4:
                            lcl_4 = prim__null
                        else:
                            lcl_5 = parse_Mul(prim__state, prim__tokens)
                            _slot_3_check = lcl_5
                            lcl_5 = prim__is__null(_slot_3_check)
                            if lcl_5:
                                lcl_5 = prim__null
                            else:
                                _slot_3 = _slot_3_check
                                lcl_6 = prim__tokens.offset
                                _off_4 = lcl_6
                                lcl_6 = prim__tk__id("quote )")
                                lcl_6 = prim__match__tk(prim__tokens, lcl_6)
                                _slot_4 = lcl_6
                                lcl_6 = prim__is__null(_slot_4)
                                if lcl_6:
                                    lcl_6 = prim__null
                                else:
                                    lcl_7 = (_slot_2, _slot_3, _slot_4)
                                    _slot_local__1 = lcl_7
                                    lcl_7 = (_slot_local__1,)
                                    lcl_7 = prim__mk__ast("Atom", lcl_7)
                                    _slot_local__2 = lcl_7
                                    lcl_7 = (_slot_0, _slot_1, _slot_local__2)
                                    _slot_local__3 = lcl_7
                                    lcl_7 = (_slot_local__3,)
                                    lcl_7 = prim__mk__ast("Mul", lcl_7)
                                    _slot_local__4 = lcl_7
                                    lcl_6 = _slot_local__4
                                lcl_5 = lcl_6
                            lcl_4 = lcl_5
                        lcl_3 = lcl_4
                    elif lcl_4 == prim__tk__id("number"):
                        lcl_4 = prim__tokens.offset
                        _off_3 = lcl_4
                        lcl_5 = prim__tk__id("quote (")
                        lcl_6 = prim__match__tk(prim__tokens, lcl_5)
                        _slot_2 = lcl_6
                        lcl_4 = prim__is__null(_slot_2)
                        if lcl_4:
                            lcl_4 = prim__null
                        else:
                            lcl_4 = parse_Mul(prim__state, prim__tokens)
                            _slot_3_check = lcl_4
                            lcl_4 = prim__is__null(_slot_3_check)
                            if lcl_4:
                                lcl_4 = prim__null
                            else:
                                _slot_3 = _slot_3_check
                                lcl_5 = prim__tokens.offset
                                _off_4 = lcl_5
                                lcl_5 = prim__tk__id("quote )")
                                lcl_5 = prim__match__tk(prim__tokens, lcl_5)
                                _slot_4 = lcl_5
                                lcl_5 = prim__is__null(_slot_4)
                                if lcl_5:
                                    lcl_5 = prim__null
                                else:
                                    lcl_6 = (_slot_2, _slot_3, _slot_4)
                                    _slot_local__1 = lcl_6
                                    lcl_6 = (_slot_local__1,)
                                    lcl_6 = prim__mk__ast("Atom", lcl_6)
                                    _slot_local__2 = lcl_6
                                    lcl_6 = (_slot_0, _slot_1, _slot_local__2)
                                    _slot_local__3 = lcl_6
                                    lcl_6 = (_slot_local__3,)
                                    lcl_6 = prim__mk__ast("Mul", lcl_6)
                                    _slot_local__4 = lcl_6
                                    lcl_5 = _slot_local__4
                                lcl_4 = lcl_5
                            lcl_4 = lcl_4
                        lcl_3 = lcl_4
                    else:
                        _tmp_2_flag = True
                        lcl_3 = prim__null
                    lcl_2 = lcl_3
                else:
                    lcl_2 = prim__null
                _tmp_2_result = lcl_2
                lcl_2 = prim__is__null(_tmp_2_result)
                lcl_3 = lcl_2 or _tmp_2_flag
                if lcl_3:
                    lcl_4 = _tmp_2_result
                else:
                    lcl_5 = prim__reset(prim__tokens, _off_2)
                    lcl_4 = prim__null
                lcl_2 = lcl_4
            lcl_1 = lcl_2
        else:
            _tmp_0_flag = True
            lcl_1 = prim__null
        lcl_0 = lcl_1
    else:
        lcl_0 = prim__null
    _tmp_0_result = lcl_0
    lcl_0 = prim__is__null(_tmp_0_result)
    lcl_1 = lcl_0 or _tmp_0_flag
    if lcl_1:
        lcl_0 = _tmp_0_result
    else:
        lcl_1 = prim__reset(prim__tokens, _off_0)
        lcl_0 = prim__null
    return lcl_0
def lr_loop_Mul(_slot_0, prim__state, prim__tokens):
    lr_Mul_reduce = _slot_0
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = lr_step_Mul(lr_Mul_reduce, prim__state, prim__tokens)
    lr_Mul_try = lcl_0
    lcl_0 = prim__is__not__null(lr_Mul_try)
    while lcl_0:
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lr_Mul_reduce = lr_Mul_try
        lcl_0 = lr_step_Mul(lr_Mul_reduce, prim__state, prim__tokens)
        lr_Mul_try = lcl_0
    lcl_0 = prim__reset(prim__tokens, _off_0)
    return lr_Mul_reduce
def parse_Atom(prim__state, prim__tokens):
    _tmp_0_flag = False
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 0)
    if lcl_0:
        lcl_2 = prim__peek(prim__tokens, 0)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote ("):
            lcl_2 = prim__tokens.offset
            _off_1 = lcl_2
            lcl_2 = prim__tk__id("quote (")
            lcl_2 = prim__match__tk(prim__tokens, lcl_2)
            _slot_0 = lcl_2
            lcl_2 = prim__is__null(_slot_0)
            if lcl_2:
                lcl_2 = prim__null
            else:
                lcl_3 = parse_Mul(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = prim__is__null(_slot_1_check)
                if lcl_3:
                    lcl_3 = prim__null
                else:
                    _slot_1 = _slot_1_check
                    lcl_4 = prim__tokens.offset
                    _off_2 = lcl_4
                    lcl_4 = prim__tk__id("quote )")
                    lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                    _slot_2 = lcl_4
                    lcl_4 = prim__is__null(_slot_2)
                    if lcl_4:
                        lcl_4 = prim__null
                    else:
                        lcl_5 = (_slot_0, _slot_1, _slot_2)
                        _slot_local__1 = lcl_5
                        lcl_5 = (_slot_local__1,)
                        lcl_5 = prim__mk__ast("Atom", lcl_5)
                        _slot_local__2 = lcl_5
                        lcl_4 = _slot_local__2
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("number"):
            lcl_2 = prim__tokens.offset
            _off_1 = lcl_2
            lcl_3 = prim__tk__id("number")
            lcl_4 = prim__match__tk(prim__tokens, lcl_3)
            _slot_0 = lcl_4
            lcl_5 = prim__is__null(_slot_0)
            if lcl_5:
                lcl_2 = prim__null
            else:
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Atom", lcl_3)
                _slot_local__1 = lcl_3
                lcl_2 = _slot_local__1
            lcl_1 = lcl_2
        else:
            _tmp_0_flag = True
            lcl_1 = prim__null
        lcl_0 = lcl_1
    else:
        lcl_0 = prim__null
    _tmp_0_result = lcl_0
    lcl_0 = prim__is__null(_tmp_0_result)
    lcl_1 = lcl_0 or _tmp_0_flag
    print(lcl_1, _tmp_0_result)
    if lcl_1:
        lcl_2 = _tmp_0_result
    else:
        lcl_0 = prim__reset(prim__tokens, _off_0)
        lcl_2 = prim__null
    return lcl_2
def parse_Mul(prim__state, prim__tokens):
    _tmp_0_flag = False
    lcl_0 = prim__tokens.offset
    _off_0 = lcl_0
    lcl_0 = prim__peekable(prim__tokens, 1)
    if lcl_0:
        lcl_2 = prim__peek(prim__tokens, 1)
        lcl_2 = lcl_2.idint
        if lcl_2 == prim__tk__id("quote /"):
            lcl_2 = prim__tokens.offset
            _off_1 = lcl_2
            lcl_2 = prim__tk__id("number")
            lcl_2 = prim__match__tk(prim__tokens, lcl_2)
            _slot_0 = lcl_2
            lcl_2 = prim__is__null(_slot_0)
            if lcl_2:
                lcl_2 = prim__null
            else:
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Atom", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (_slot_local__1,)
                lcl_3 = prim__mk__ast("Mul", lcl_3)
                _slot_local__2 = lcl_3
                lcl_3 = lr_loop_Mul(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote *"):
            lcl_2 = prim__tokens.offset
            _off_1 = lcl_2
            lcl_3 = prim__tk__id("number")
            lcl_2 = prim__match__tk(prim__tokens, lcl_3)
            _slot_0 = lcl_2
            lcl_2 = prim__is__null(_slot_0)
            if lcl_2:
                lcl_2 = prim__null
            else:
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast("Atom", lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (_slot_local__1,)
                lcl_3 = prim__mk__ast("Mul", lcl_3)
                _slot_local__2 = lcl_3
                lcl_3 = lr_loop_Mul(_slot_local__2, prim__state, prim__tokens)
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("quote ("):
            lcl_2 = prim__tokens.offset
            _off_1 = lcl_2
            lcl_3 = prim__tk__id("quote (")
            lcl_2 = prim__match__tk(prim__tokens, lcl_3)
            _slot_0 = lcl_2
            lcl_2 = prim__is__null(_slot_0)
            if lcl_2:
                lcl_2 = prim__null
            else:
                lcl_3 = parse_Mul(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = prim__is__null(_slot_1_check)
                if lcl_3:
                    lcl_3 = prim__null
                else:
                    _slot_1 = _slot_1_check
                    lcl_4 = prim__tokens.offset
                    _off_2 = lcl_4
                    lcl_4 = prim__tk__id("quote )")
                    lcl_4 = prim__match__tk(prim__tokens, lcl_4)
                    _slot_2 = lcl_4
                    lcl_4 = prim__is__null(_slot_2)
                    if lcl_4:
                        lcl_4 = prim__null
                    else:
                        lcl_5 = (_slot_0, _slot_1, _slot_2)
                        _slot_local__1 = lcl_5
                        lcl_5 = (_slot_local__1,)
                        lcl_5 = prim__mk__ast("Atom", lcl_5)
                        _slot_local__2 = lcl_5
                        lcl_5 = (_slot_local__2,)
                        lcl_5 = prim__mk__ast("Mul", lcl_5)
                        _slot_local__3 = lcl_5
                        lcl_5 = lr_loop_Mul(_slot_local__3, prim__state, prim__tokens)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_2 = lcl_3
            lcl_1 = lcl_2
        elif lcl_2 == prim__tk__id("number"):
            lcl_2 = prim__tokens.offset
            _off_1 = lcl_2
            lcl_3 = prim__tk__id("quote (")
            lcl_4 = prim__match__tk(prim__tokens, lcl_3)
            _slot_0 = lcl_4
            lcl_2 = prim__is__null(_slot_0)
            if lcl_2:
                lcl_2 = prim__null
            else:
                lcl_2 = parse_Mul(prim__state, prim__tokens)
                _slot_1_check = lcl_2
                lcl_2 = prim__is__null(_slot_1_check)
                if lcl_2:
                    lcl_2 = prim__null
                else:
                    _slot_1 = _slot_1_check
                    lcl_3 = prim__tokens.offset
                    _off_2 = lcl_3
                    lcl_3 = prim__tk__id("quote )")
                    lcl_3 = prim__match__tk(prim__tokens, lcl_3)
                    _slot_2 = lcl_3
                    lcl_3 = prim__is__null(_slot_2)
                    if lcl_3:
                        lcl_3 = prim__null
                    else:
                        lcl_4 = (_slot_0, _slot_1, _slot_2)
                        _slot_local__1 = lcl_4
                        lcl_4 = (_slot_local__1,)
                        lcl_4 = prim__mk__ast("Atom", lcl_4)
                        _slot_local__2 = lcl_4
                        lcl_4 = (_slot_local__2,)
                        lcl_4 = prim__mk__ast("Mul", lcl_4)
                        _slot_local__3 = lcl_4
                        lcl_4 = lr_loop_Mul(_slot_local__3, prim__state, prim__tokens)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_2 = lcl_2
            lcl_1 = lcl_2
        else:
            _tmp_0_flag = True
            lcl_1 = prim__null
        lcl_0 = lcl_1
    else:
        lcl_0 = prim__null
    _tmp_0_result = lcl_0
    lcl_0 = prim__is__null(_tmp_0_result)
    lcl_1 = lcl_0 or _tmp_0_flag
    if lcl_1:
        lcl_2 = _tmp_0_result
    else:
        lcl_3 = prim__reset(prim__tokens, _off_0)
        lcl_2 = prim__null
    return lcl_2
